#!/bin/bash

# Function to check the exit status of the command and print a message
check_status() {
    eval "$1"
    local command_status=$?
    if [ $command_status -eq 0 ]; then
        echo -e "\033[32m[SUCCESS]\033[0m Command: $1"
        ((success_count++))
    else
        echo -e "\033[31m[ERROR]\033[0m Command: $1 failed"
        ((error_count++))
    fi
    return $command_status
}

# Function for countdown
countdown() {
    local i
    for i in {5..1}; do
        echo -ne "\033[033mPress CTL+C to cancel - Sleeping for $i seconds...\033[0m\033[0K\r"
        sleep 1
    done
    echo -e "\033[033mPress CTL+C to cancel - Sleeping for 0 seconds...\033[0m\033[0K"
}

# Function to get the current time
get_current_time() {
    echo $(date +%s%N)
}

# Function to format elapsed time in a human-friendly way
format_elapsed_time() {
    local elapsed_time=$1

    local milliseconds=$((elapsed_time % 1000))
    local seconds=$((elapsed_time / 1000 % 60))
    local minutes=$((elapsed_time / (1000 * 60) % 60))
    local hours=$((elapsed_time / (1000 * 60 * 60)))

    printf "%02d:%02d:%02d.%03d" $hours $minutes $seconds $milliseconds
}

# Check if an argument is provided
if [ $# -eq 0 ]; then
    echo "Error: Please provide a directory as an argument."
    exit 1
fi

# Get the directory from the first command-line argument
directory="$1"

# Change to the specified directory
cd "$directory" || exit 1

# Initialize counters and timing
success_count=0
error_count=0
start_time=$(get_current_time)

echo "Starting dynaudnorm filter in directory: $directory"
countdown

# Loop through each video file in the current folder
for video in *.mp4 *.mkv; do
    # Check if there are matching files
    if [ -e "$video" ]; then
        # Extract file name and extension
        filename=$(basename -- "$video")
        extension="${filename##*.}"
        filename_noext="${filename%.*}"

        # Output file with [dynaudnorm] suffix in the same folder
        output_file="${filename_noext}.dynaudnorm.$extension"

        # Apply dynaudnorm filter to normalize audio and copy video codec
        check_status "ffmpeg -i '$video' -filter:a dynaudnorm -target_level 0.0 -c:v copy '$output_file'"

        echo "Processed: $output_file"
    fi
done

# Calculate and display the script execution time
end_time=$(get_current_time)
elapsed_time=$(( (end_time - start_time) / 1000000 ))  # Convert nanoseconds to milliseconds

echo -e "\nSummary:"
echo "Processed files: $success_count"
echo "Failed files: $error_count"
echo "Total execution time: $(format_elapsed_time $elapsed_time)"

